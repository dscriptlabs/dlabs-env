name: NPM Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Verify NPM Token
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "Error: NPM_TOKEN is not set in repository secrets"
            exit 1
          fi
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          if ! npm whoami; then
            echo "Error: Invalid NPM_TOKEN"
            exit 1
          fi
          echo "NPM Token verified successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Bump version
        run: |
          # Get package name from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Package name: $PACKAGE_NAME"

          # Get latest version from npm
          NPM_VERSION=$(npm view $PACKAGE_NAME version 2>/dev/null || echo "0.0.0")
          echo "Latest npm version: $NPM_VERSION"

          # Split version into parts
          IFS='.' read -r -a version_parts <<< "$NPM_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version --allow-same-version

          # Stage and commit the changes
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"

          # Store new version for later use
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build and Publish to NPM
        if: success()
        run: |
          echo "Publishing version: ${{ env.version }}"
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate Release Notes
        if: success()
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          generate_changelog() {
            # Group commits by type
            echo "$1" | while read -r line; do
              if [[ $line =~ ^"feat"[(:)] ]]; then
                echo "feat|✨ Features|$line"
              elif [[ $line =~ ^"fix"[(:)] ]]; then
                echo "fix|🐛 Bug Fixes|$line"
              elif [[ $line =~ ^"docs"[(:)] ]]; then
                echo "docs|📚 Documentation|$line"
              elif [[ $line =~ ^"style"[(:)] ]]; then
                echo "style|💎 Styles|$line"
              elif [[ $line =~ ^"refactor"[(:)] ]]; then
                echo "refactor|♻️ Code Refactoring|$line"
              elif [[ $line =~ ^"perf"[(:)] ]]; then
                echo "perf|⚡ Performance Improvements|$line"
              elif [[ $line =~ ^"test"[(:)] ]]; then
                echo "test|✅ Tests|$line"
              elif [[ $line =~ ^"build"[(:)] ]]; then
                echo "build|📦 Build System|$line"
              elif [[ $line =~ ^"ci"[(:)] ]]; then
                echo "ci|👷 CI/CD|$line"
              elif [[ $line =~ ^"chore"[(:)] ]]; then
                echo "chore|🔧 Chores|$line"
              else
                echo "other|🔍 Other Changes|$line"
              fi
            done | sort -t'|' -k1,1 | awk -F'|' '
              function print_section(section, content) {
                if (content != "") {
                  print "\n### " section
                  print content
                }
              }
              BEGIN { 
                current_section = ""
                section_content = ""
              }
              {
                if ($2 != current_section && section_content != "") {
                  print_section(current_section, section_content)
                  section_content = ""
                }
                current_section = $2
                commit_msg = $3
                gsub(/^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([^)]+\))?:/, "", commit_msg)
                section_content = section_content "* " commit_msg "\n"
              }
              END {
                if (section_content != "") {
                  print_section(current_section, section_content)
                }
              }'
          }

          if [ -z "$LAST_TAG" ]; then
            # If no previous tag exists, get all commits
            RELEASE_BODY="## 🎉 First Release v${{ env.version }}\n"
            COMMITS=$(git log --pretty=format:"%s (%h)")
          else
            # Get commits since last tag
            RELEASE_BODY="## 🚀 Release v${{ env.version }}\n"
            COMMITS=$(git log "$LAST_TAG"..HEAD --pretty=format:"%s (%h)")
          fi

          # Generate and append changelog
          CHANGELOG=$(echo "$COMMITS" | generate_changelog)
          RELEASE_BODY+="$CHANGELOG"

          # Add footer
          RELEASE_BODY+="\n\n---\n*Full Changelog: [$LAST_TAG...v${{ env.version }}](https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ env.version }})*"

          # Escape multiline string for GitHub Actions
          RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
          RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
          RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"

          echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV

      - name: Push version changes
        if: success()
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          release_name: Release v${{ env.version }}
          draft: false
          prerelease: false
          body: ${{ env.RELEASE_BODY }}
